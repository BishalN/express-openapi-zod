{"version":3,"sources":["../src/model.ts"],"names":["User","z","object","id","string","openapi","example","name","Pet","age","optional","number","ownerId","PetWithOwner","extend","owner","ErrorResponse","message","ValidationError","errors","array","path","errorCode","registerModels","registry","register"],"mappings":";;;;;;;AACA;;AAEO,IAAMA,IAAI,GAAGC,OAAEC,MAAF,CAAS;AAC3BC,EAAAA,EAAE,EAAEF,OAAEG,MAAF,GAAWC,OAAX,CAAmB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAnB,CADuB;AAE3BC,EAAAA,IAAI,EAAEN,OAAEG,MAAF,GAAWC,OAAX,CAAmB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAnB;AAFqB,CAAT,CAAb;;;;AAKA,IAAME,GAAG,GAAGP,OAAEC,MAAF,CAAS;AAC1BC,EAAAA,EAAE,EAAEF,OAAEG,MAAF,GAAWC,OAAX,CAAmB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAnB,CADsB;AAE1BC,EAAAA,IAAI,EAAEN,OAAEG,MAAF,GAAWC,OAAX,CAAmB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAnB,CAFoB;AAG1BG,EAAAA,GAAG,EAAER,OAAES,QAAF,CAAWT,OAAEU,MAAF,EAAX,EAAuBN,OAAvB,CAA+B;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAA/B,CAHqB;AAI1BM,EAAAA,OAAO,EAAEX,OAAES,QAAF,CAAWT,OAAEG,MAAF,EAAX,EAAuBC,OAAvB,CAA+B;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAA/B;AAJiB,CAAT,CAAZ;;;AAOA,IAAMO,YAAY,GAAGL,GAAG,CAACM,MAAJ,CAAW;AACrCC,EAAAA,KAAK,EAAEf;AAD8B,CAAX,CAArB;;;AAIA,IAAMgB,aAAa,GAAGf,OAAEC,MAAF,CAAS;AACpCe,EAAAA,OAAO,EAAEhB,OAAEG,MAAF,GAAWC,OAAX,CAAmB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAnB;AAD2B,CAAT,CAAtB;;;AAIA,IAAMY,eAAe,GAAGF,aAAa,CAACF,MAAd,CAAqB;AAClDK,EAAAA,MAAM,EAAElB,OAAEmB,KAAF,CACNnB,OAAEC,MAAF,CAAS;AAAEmB,IAAAA,IAAI,EAAEpB,OAAEG,MAAF,EAAR;AAAoBa,IAAAA,OAAO,EAAEhB,OAAEG,MAAF,EAA7B;AAAyCkB,IAAAA,SAAS,EAAErB,OAAEG,MAAF;AAApD,GAAT,CADM;AAD0C,CAArB,CAAxB;;;AAMA,IAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAA+B;AAC3DA,EAAAA,QAAQ,CAACC,QAAT,CAAkB,UAAlB,EAA8BP,eAA9B;AACAM,EAAAA,QAAQ,CAACC,QAAT,CAAkB,UAAlB,EAA8BT,aAA9B;AACAQ,EAAAA,QAAQ,CAACC,QAAT,CAAkB,UAAlB,EAA8BzB,IAA9B;AACAwB,EAAAA,QAAQ,CAACC,QAAT,CAAkB,UAAlB,EAA8BjB,GAA9B;AACAgB,EAAAA,QAAQ,CAACC,QAAT,CAAkB,UAAlB,EAA8BZ,YAA9B;AACD,CANM","sourcesContent":["import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\r\nimport { z } from \"./zod\";\r\n\r\nexport const User = z.object({\r\n  id: z.string().openapi({ example: \"abc123\" }),\r\n  name: z.string().openapi({ example: \"Henry\" })\r\n});\r\n\r\nexport const Pet = z.object({\r\n  id: z.string().openapi({ example: \"abc123\" }),\r\n  name: z.string().openapi({ example: \"Mittens\" }),\r\n  age: z.optional(z.number()).openapi({ example: 5 }),\r\n  ownerId: z.optional(z.string()).openapi({ example: \"Henry\" })\r\n});\r\n\r\nexport const PetWithOwner = Pet.extend({\r\n  owner: User\r\n});\r\n\r\nexport const ErrorResponse = z.object({\r\n  message: z.string().openapi({ example: \"Something went wrong!\" })\r\n});\r\n\r\nexport const ValidationError = ErrorResponse.extend({\r\n  errors: z.array(\r\n    z.object({ path: z.string(), message: z.string(), errorCode: z.string() })\r\n  )\r\n});\r\n\r\nexport const registerModels = (registry: OpenAPIRegistry) => {\r\n  registry.register(\"registry\", ValidationError);\r\n  registry.register(\"registry\", ErrorResponse);\r\n  registry.register(\"registry\", User);\r\n  registry.register(\"registry\", Pet);\r\n  registry.register(\"registry\", PetWithOwner);\r\n};\r\n"],"file":"model.js"}