{"version":3,"sources":["../../src/routes/pets.ts"],"names":["router","registry","openapi","path","request","query","z","object","ownerId","optional","string","description","withOwner","example","responses","array","union","Pet","PetWithOwner","get","req","res","json","filter","pet","map","params","petId","ValidationError","message","ErrorResponse","status","body","schema","name","age","number","post","sendStatus"],"mappings":"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","sourcesContent":["import { OpenAPIRouter } from \"express-openapi-zod\";\r\n\r\nimport {\r\n  createPet,\r\n  getPet,\r\n  listPets,\r\n  removePet,\r\n  withOwner\r\n} from \"../controllers/pets\";\r\nimport { ErrorResponse, Pet, PetWithOwner, ValidationError } from \"../model\";\r\nimport { registry } from \"../registry\";\r\nimport { z } from \"../zod\";\r\n\r\nconst router = OpenAPIRouter(registry);\r\n\r\nrouter\r\n  .openapi({\r\n    path: \"/pets\",\r\n    request: {\r\n      query: z.object({\r\n        ownerId: z\r\n          .optional(z.string())\r\n          .openapi({ description: \"Pets belonging to person.\" }),\r\n        withOwner: z.optional(z.boolean()).openapi({\r\n          description: \"Return the full details of the owner.\",\r\n          example: false\r\n        })\r\n      })\r\n    },\r\n    responses: {\r\n      // Array of Pet or PetWithOwner\r\n      200: z.array(z.union([Pet, PetWithOwner]))\r\n    }\r\n  })\r\n  .get(\"\", (req, res) => {\r\n    res.json(\r\n      listPets()\r\n        .filter(\r\n          (pet) => !req.query.ownerId || pet.ownerId === req.query.ownerId\r\n        )\r\n        .map((pet) => (req.query.withOwner ? withOwner(pet) : pet))\r\n    );\r\n  });\r\n\r\nrouter\r\n  .openapi({\r\n    path: \"/pets/{petId}\",\r\n    request: {\r\n      params: z.object({\r\n        petId: z.string().openapi({ description: \"Identity of pet\" })\r\n      }),\r\n      query: z.object({\r\n        withOwner: z.optional(z.boolean()).openapi({\r\n          description: \"Return the full details of the owner.\",\r\n          example: false\r\n        })\r\n      })\r\n    },\r\n    responses: {\r\n      200: [Pet, PetWithOwner],\r\n      400: ValidationError,\r\n      404: z.object({\r\n        message: z.string().openapi({ example: \"Couldn't find it!\" })\r\n      }),\r\n      500: ErrorResponse\r\n    }\r\n  })\r\n  .get(\"\", (req, res) => {\r\n    const pet = getPet(req.params.petId);\r\n\r\n    if (!pet) {\r\n      res\r\n        .status(404)\r\n        .json({ message: \"We couldn't find the pet you were looking for!\" });\r\n    }\r\n\r\n    res.json(pet);\r\n  });\r\n\r\nrouter\r\n  .openapi({\r\n    path: \"/pets\",\r\n    request: {\r\n      body: {\r\n        description: \"Details of pet to create\",\r\n        schema: z.object({\r\n          name: z.string(),\r\n          age: z.number(),\r\n          ownerId: z.string()\r\n        })\r\n      }\r\n    },\r\n    responses: {\r\n      200: Pet,\r\n      400: ValidationError,\r\n      500: ErrorResponse\r\n    }\r\n  })\r\n  .post(\"\", (req, res) => {\r\n    res.json(createPet(req.body));\r\n  });\r\n\r\nrouter\r\n  .openapi({\r\n    path: \"/pets/{petId}\",\r\n    request: {\r\n      params: z.object({\r\n        petId: z.string().openapi({ description: \"Identity of pet\" })\r\n      })\r\n    },\r\n    responses: {\r\n      200: null,\r\n      400: ValidationError,\r\n      500: ErrorResponse\r\n    }\r\n  })\r\n  .delete(\"/:petId\", (req, res) => {\r\n    removePet(req.params.petId);\r\n    res.sendStatus(200);\r\n  });\r\n\r\nexport default router.router;\r\n"],"file":"pets.js"}