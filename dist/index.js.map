{"version":3,"sources":["../src/index.ts"],"names":["app","use","openapiSchema","swaggerUi","serve","setup","OpenApiValidator","middleware","apiSpec","validateRequests","validateResponses","err","req","res","next","status","json","message","errors","userRouter","petRouter","schemaRouter","listen","console","log"],"mappings":";;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,oBAAR,E,CAEA;;AACA,IAAMC,aAAa,GAAG,+BAAtB,C,CAEA;;AACAF,GAAG,CAACC,GAAJ,CAAQ,GAAR,EAAaE,6BAAUC,KAAvB,EAA8BD,6BAAUE,KAAV,CAAgBH,aAAhB,CAA9B,E,CAEA;;AACAF,GAAG,CAACC,GAAJ,CACEK,gBAAgB,CAACC,UAAjB,CAA4B;AAC1BC,EAAAA,OAAO,EAAEN,aADiB;AAE1BO,EAAAA,gBAAgB,EAAE,IAFQ;AAG1BC,EAAAA,iBAAiB,EAAE;AAHO,CAA5B,CADF,EAME,UAACC,GAAD,EAAWC,GAAX,EAAyBC,GAAzB,EAAwCC,IAAxC,EAA+D;AAC7D;AACAD,EAAAA,GAAG,CAACE,MAAJ,CAAWJ,GAAG,CAACI,MAAJ,IAAc,GAAzB,EAA8BC,IAA9B,CAAmC;AACjCC,IAAAA,OAAO,EAAEN,GAAG,CAACM,OADoB;AAEjCC,IAAAA,MAAM,EAAEP,GAAG,CAACO;AAFqB,GAAnC;AAID,CAZH,E,CAeA;;AACAlB,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkBkB,iBAAlB;AACAnB,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBmB,gBAAjB;AACApB,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBoB,kBAAnB;AAEArB,GAAG,CAACsB,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrBC,EAAAA,OAAO,CAACC,GAAR;AACD,CAFD","sourcesContent":["import express, { json, NextFunction, Request, Response } from \"express\";\nimport * as OpenApiValidator from \"express-openapi-validator\";\nimport { OpenAPIV3 } from \"express-openapi-validator/dist/framework/types\";\nimport swaggerUi from \"swagger-ui-express\";\n\nimport petRouter from \"routes/pets\";\nimport userRouter from \"routes/users\";\nimport schemaRouter from \"routes/schema\";\nimport { getOpenAPISpec } from \"registry\";\n\nconst app = express();\n\napp.use(json());\n\n// Generate the openapi schema (must come after import of routers)\nconst openapiSchema = getOpenAPISpec();\n\n// Serve openapi spec as Swagger documentation\napp.use(\"/\", swaggerUi.serve, swaggerUi.setup(openapiSchema));\n\n// Use openapi spec to validate requests/responses\napp.use(\n  OpenApiValidator.middleware({\n    apiSpec: openapiSchema as OpenAPIV3.Document,\n    validateRequests: true,\n    validateResponses: true\n  }),\n  (err: any, req: Request, res: Response, next: NextFunction) => {\n    // format validation errors\n    res.status(err.status || 500).json({\n      message: err.message,\n      errors: err.errors\n    });\n  }\n);\n\n// Application routes\napp.use(\"/users\", userRouter);\napp.use(\"/pets\", petRouter);\napp.use(\"/schema\", schemaRouter);\n\napp.listen(3000, () => {\n  console.log(`ðŸš€ Server ready at: http://localhost:3000`);\n});\n"],"file":"index.js"}